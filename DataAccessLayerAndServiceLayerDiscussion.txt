Data access layer and service layer
---------------------------------------
Database:-	MySQL/PostGres

Step 1:-
	Creating Spring Boot Project :- https://start.spring.io/
	Dependecies Selected :-
		spring-web -> RestFul API's and Spring MVC implementations.
		spring-boot-starter-data-jpa -> Database (MySQL) Opeartions
		mysql-connector-java -> Driver for MySQL
		lombok -> for reducing boilerplate code.

-> Layers
		-> Data Access Layer
			@Entity
			Student
				-> id, firstName, lastName, email, course
			@Repository
				StudentRepository(I) -> extends JpaRepository<Student, Long>
					By default => findById, findAll, save, deleteById, delete
					List<Student> findByFirstNameAndLastName(String firstName and lastName);
					Student findByEmail(String email);

		-> Service Layer
			@Service
				StudentService(I)
				C + R  + U + D

				C -> Student saveStudent(Student student);

				R -> List<Student>getStudents(); -> findAll
				R -> Student  getStudentById(Long Id); -> findById

				Database:
						1 raghav mj raghav@gmail.com
						2 keshav anand keshav@gmail.com
						findById(25) => empty => Optional Entity =>

				R -> List<Student> getStudentByName(String firstName, String lastName);
				R -> Student getStudentByEmail(String email);

				U -> Student udpateStudent(Long id, Student student);

				D -> Student deleteStudent(Long id);

		-> Controller
			->@RestContoller

			@PostMapping("/students")
			Student saveStudent(@RequestBody Student student);
				URL :- http://localhost:8083/students
				@RequestBody => { "firstName":"raghav", "lastName":"mj", "email":"raghav@gmail.com" }
				DB:- insert into student (firstName, lastName, email) values ("raghav", "mj", "raghav@gmail")

			@GetMapping("/students")
			List<Student> getStudents()
				URL :- http://localhost:8083/students
				DB:- select * from student;

			@GetMapping("/students/{pathVarStudentId}")
			Student getStudentById(@PathVariable("pathVarStudentId") Long studentId)
				URL: http://localhost:8083/students/5
				DB:- select * from student where id=5;

			@GetMapping("/searcByEmail")
			List<Students> getStudentByName(@RequestParam("emailId") String emailId)
				URL:  http://localhost:8083/searchByEmail?email=raghav@gmail.com
				DB:- select * from student where email=raghav@gmail.com;

			@GetMapping("/searcByName")
			List<Students> getStudentByName(@RequestParam("firstName") String firstName,
																		 @RequestParam("lastName")String lastName);
				URL: http://localhost:8083/searchByName?firstName=raghav&lastName=mj
				DB:- select * from student where firstName="raghav" and lastName ="mj";

			@PutMapping("/students/{id}")
			Student updateStudent(@PathVariable("pathVarStudentId") Long studentId,  @RequestBody Student student)
				URL: http://localhost:8083/students/5
				@PathVariable => 5
				@RequestBody => { "id": 5, "firstName": "brijesh", "lastName": "patel", "email": "brijeshpatel@gmail.com" }
				DB: update student set email="brijeshpatel@gmail.com, first_name="brijesh", last_name="patel"where id=5

			@DeleteMapping("/students/{id}")
			Student deleteStudent(@PathVariable("pathVarStudentId") Long studentId)
				URL:- http://localhost:8083/students/5
				DB:- delete from student where id=5

		@PathVariable is from spring and @PathParam is from JAX-RS.
		@PathParam can use with REST only, where @PathVariable used in Spring so it works in MVC and REST.






